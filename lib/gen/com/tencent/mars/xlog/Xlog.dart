// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../_init.dart";

/// from: com.tencent.mars.xlog.Xlog$XLogConfig
class Xlog_XLogConfig extends jni.JObject {
  @override
  late final jni.JObjType<Xlog_XLogConfig> $type = type;

  Xlog_XLogConfig.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Xlog_XLogConfigType();
  static final _get_level = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__level")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_level = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  jni.JObjectPtr, ffi.Int32)>>("set_Xlog_XLogConfig__level")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int level
  int get level => _get_level(reference).integer;

  /// from: public int level
  set level(int value) => _set_level(reference, value).check();

  static final _get_mode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__mode")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_mode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  jni.JObjectPtr, ffi.Int32)>>("set_Xlog_XLogConfig__mode")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int mode
  int get mode => _get_mode(reference).integer;

  /// from: public int mode
  set mode(int value) => _set_mode(reference, value).check();

  static final _get_logdir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__logdir")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_logdir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Pointer<ffi.Void>)>>("set_Xlog_XLogConfig__logdir")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String logdir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get logdir =>
      const jni.JStringType().fromRef(_get_logdir(reference).object);

  /// from: public java.lang.String logdir
  /// The returned object must be released after use, by calling the [release] method.
  set logdir(jni.JString value) =>
      _set_logdir(reference, value.reference).check();

  static final _get_nameprefix = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__nameprefix")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_nameprefix = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Pointer<ffi.Void>)>>("set_Xlog_XLogConfig__nameprefix")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String nameprefix
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get nameprefix =>
      const jni.JStringType().fromRef(_get_nameprefix(reference).object);

  /// from: public java.lang.String nameprefix
  /// The returned object must be released after use, by calling the [release] method.
  set nameprefix(jni.JString value) =>
      _set_nameprefix(reference, value.reference).check();

  static final _get_pubkey = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__pubkey")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_pubkey = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Pointer<ffi.Void>)>>("set_Xlog_XLogConfig__pubkey")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String pubkey
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get pubkey =>
      const jni.JStringType().fromRef(_get_pubkey(reference).object);

  /// from: public java.lang.String pubkey
  /// The returned object must be released after use, by calling the [release] method.
  set pubkey(jni.JString value) =>
      _set_pubkey(reference, value.reference).check();

  static final _get_compressmode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__compressmode")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_compressmode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Int32)>>("set_Xlog_XLogConfig__compressmode")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int compressmode
  int get compressmode => _get_compressmode(reference).integer;

  /// from: public int compressmode
  set compressmode(int value) => _set_compressmode(reference, value).check();

  static final _get_compresslevel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__compresslevel")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_compresslevel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Int32)>>("set_Xlog_XLogConfig__compresslevel")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int compresslevel
  int get compresslevel => _get_compresslevel(reference).integer;

  /// from: public int compresslevel
  set compresslevel(int value) => _set_compresslevel(reference, value).check();

  static final _get_cachedir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__cachedir")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_cachedir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(jni.JObjectPtr,
                  ffi.Pointer<ffi.Void>)>>("set_Xlog_XLogConfig__cachedir")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String cachedir
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get cachedir =>
      const jni.JStringType().fromRef(_get_cachedir(reference).object);

  /// from: public java.lang.String cachedir
  /// The returned object must be released after use, by calling the [release] method.
  set cachedir(jni.JString value) =>
      _set_cachedir(reference, value.reference).check();

  static final _get_cachedays = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Xlog_XLogConfig__cachedays")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_cachedays = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  jni.JObjectPtr, ffi.Int32)>>("set_Xlog_XLogConfig__cachedays")
      .asFunction<jni.JniResult Function(jni.JObjectPtr, int)>();

  /// from: public int cachedays
  int get cachedays => _get_cachedays(reference).integer;

  /// from: public int cachedays
  set cachedays(int value) => _set_cachedays(reference, value).check();

  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "Xlog_XLogConfig__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Xlog_XLogConfig() {
    return Xlog_XLogConfig.fromRef(_new0().object);
  }
}

final class $Xlog_XLogConfigType extends jni.JObjType<Xlog_XLogConfig> {
  const $Xlog_XLogConfigType();

  @override
  String get signature => r"Lcom/tencent/mars/xlog/Xlog$XLogConfig;";

  @override
  Xlog_XLogConfig fromRef(jni.JObjectPtr ref) => Xlog_XLogConfig.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Xlog_XLogConfigType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Xlog_XLogConfigType) &&
        other is $Xlog_XLogConfigType;
  }
}

/// from: com.tencent.mars.xlog.Xlog
class Xlog extends jni.JObject {
  @override
  late final jni.JObjType<Xlog> $type = type;

  Xlog.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $XlogType();

  /// from: static public final int LEVEL_ALL
  static const LEVEL_ALL = 0;

  /// from: static public final int LEVEL_VERBOSE
  static const LEVEL_VERBOSE = 0;

  /// from: static public final int LEVEL_DEBUG
  static const LEVEL_DEBUG = 1;

  /// from: static public final int LEVEL_INFO
  static const LEVEL_INFO = 2;

  /// from: static public final int LEVEL_WARNING
  static const LEVEL_WARNING = 3;

  /// from: static public final int LEVEL_ERROR
  static const LEVEL_ERROR = 4;

  /// from: static public final int LEVEL_FATAL
  static const LEVEL_FATAL = 5;

  /// from: static public final int LEVEL_NONE
  static const LEVEL_NONE = 6;

  /// from: static public final int COMPRESS_LEVEL1
  static const COMPRESS_LEVEL1 = 1;

  /// from: static public final int COMPRESS_LEVEL2
  static const COMPRESS_LEVEL2 = 2;

  /// from: static public final int COMPRESS_LEVEL3
  static const COMPRESS_LEVEL3 = 3;

  /// from: static public final int COMPRESS_LEVEL4
  static const COMPRESS_LEVEL4 = 4;

  /// from: static public final int COMPRESS_LEVEL5
  static const COMPRESS_LEVEL5 = 5;

  /// from: static public final int COMPRESS_LEVEL6
  static const COMPRESS_LEVEL6 = 6;

  /// from: static public final int COMPRESS_LEVEL7
  static const COMPRESS_LEVEL7 = 7;

  /// from: static public final int COMPRESS_LEVEL8
  static const COMPRESS_LEVEL8 = 8;

  /// from: static public final int COMPRESS_LEVEL9
  static const COMPRESS_LEVEL9 = 9;

  /// from: static public final int AppednerModeAsync
  static const AppednerModeAsync = 0;

  /// from: static public final int AppednerModeSync
  static const AppednerModeSync = 1;

  /// from: static public final int ZLIB_MODE
  static const ZLIB_MODE = 0;

  /// from: static public final int ZSTD_MODE
  static const ZSTD_MODE = 1;

  static final _new0 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Xlog__new0")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Xlog() {
    return Xlog.fromRef(_new0().object);
  }

  static final _open = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Uint8,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Xlog__open")
      .asFunction<
          jni.JniResult Function(
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void open(boolean z, int i, int i1, java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3)
  static void open(
    bool z,
    int i,
    int i1,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JString string3,
  ) {
    return _open(z ? 1 : 0, i, i1, string.reference, string1.reference,
            string2.reference, string3.reference)
        .check();
  }

  static final _logV = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logV")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void logV(long j, java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j1, long j2, java.lang.String string3)
  void logV(
    int j,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i,
    int i1,
    int j1,
    int j2,
    jni.JString string3,
  ) {
    return _logV(reference, j, string.reference, string1.reference,
            string2.reference, i, i1, j1, j2, string3.reference)
        .check();
  }

  static final _logD = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logD")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void logD(long j, java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j1, long j2, java.lang.String string3)
  void logD(
    int j,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i,
    int i1,
    int j1,
    int j2,
    jni.JString string3,
  ) {
    return _logD(reference, j, string.reference, string1.reference,
            string2.reference, i, i1, j1, j2, string3.reference)
        .check();
  }

  static final _logI = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logI")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void logI(long j, java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j1, long j2, java.lang.String string3)
  void logI(
    int j,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i,
    int i1,
    int j1,
    int j2,
    jni.JString string3,
  ) {
    return _logI(reference, j, string.reference, string1.reference,
            string2.reference, i, i1, j1, j2, string3.reference)
        .check();
  }

  static final _logW = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logW")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void logW(long j, java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j1, long j2, java.lang.String string3)
  void logW(
    int j,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i,
    int i1,
    int j1,
    int j2,
    jni.JString string3,
  ) {
    return _logW(reference, j, string.reference, string1.reference,
            string2.reference, i, i1, j1, j2, string3.reference)
        .check();
  }

  static final _logE = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logE")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void logE(long j, java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j1, long j2, java.lang.String string3)
  void logE(
    int j,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i,
    int i1,
    int j1,
    int j2,
    jni.JString string3,
  ) {
    return _logE(reference, j, string.reference, string1.reference,
            string2.reference, i, i1, j1, j2, string3.reference)
        .check();
  }

  static final _logF = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logF")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void logF(long j, java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j1, long j2, java.lang.String string3)
  void logF(
    int j,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i,
    int i1,
    int j1,
    int j2,
    jni.JString string3,
  ) {
    return _logF(reference, j, string.reference, string1.reference,
            string2.reference, i, i1, j1, j2, string3.reference)
        .check();
  }

  static final _appenderOpen = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Xlog__appenderOpen")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public void appenderOpen(int i, int i1, java.lang.String string, java.lang.String string1, java.lang.String string2, int i2)
  void appenderOpen(
    int i,
    int i1,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i2,
  ) {
    return _appenderOpen(reference, i, i1, string.reference, string1.reference,
            string2.reference, i2)
        .check();
  }

  static final _logWrite = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logWrite")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public native void logWrite(com.tencent.mars.xlog.Xlog$XLoggerInfo xLoggerInfo, java.lang.String string)
  static void logWrite(
    jni.JObject xLoggerInfo,
    jni.JString string,
  ) {
    return _logWrite(xLoggerInfo.reference, string.reference).check();
  }

  static final _logWrite2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logWrite2")
      .asFunction<
          jni.JniResult Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void logWrite2(int i, java.lang.String string, java.lang.String string1, java.lang.String string2, int i1, int i2, long j, long j1, java.lang.String string3)
  static void logWrite2(
    int i,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i1,
    int i2,
    int j,
    int j1,
    jni.JString string3,
  ) {
    return _logWrite2(i, string.reference, string1.reference, string2.reference,
            i1, i2, j, j1, string3.reference)
        .check();
  }

  static final _logWrite21 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int64,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Xlog__logWrite21")
      .asFunction<
          jni.JniResult Function(
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public native void logWrite2(long j, int i, java.lang.String string, java.lang.String string1, java.lang.String string2, int i1, int i2, long j1, long j2, java.lang.String string3)
  static void logWrite21(
    int j,
    int i,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i1,
    int i2,
    int j1,
    int j2,
    jni.JString string3,
  ) {
    return _logWrite21(j, i, string.reference, string1.reference,
            string2.reference, i1, i2, j1, j2, string3.reference)
        .check();
  }

  static final _getLogLevel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Xlog__getLogLevel")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public native int getLogLevel(long j)
  int getLogLevel(
    int j,
  ) {
    return _getLogLevel(reference, j).integer;
  }

  static final _setAppenderMode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Int32)>>("Xlog__setAppenderMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public native void setAppenderMode(long j, int i)
  void setAppenderMode(
    int j,
    int i,
  ) {
    return _setAppenderMode(reference, j, i).check();
  }

  static final _openLogInstance = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Xlog__openLogInstance")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public long openLogInstance(int i, int i1, java.lang.String string, java.lang.String string1, java.lang.String string2, int i2)
  int openLogInstance(
    int i,
    int i1,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    int i2,
  ) {
    return _openLogInstance(reference, i, i1, string.reference,
            string1.reference, string2.reference, i2)
        .long;
  }

  static final _getXlogInstance = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Xlog__getXlogInstance")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public native long getXlogInstance(java.lang.String string)
  int getXlogInstance(
    jni.JString string,
  ) {
    return _getXlogInstance(reference, string.reference).long;
  }

  static final _releaseXlogInstance = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Xlog__releaseXlogInstance")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public native void releaseXlogInstance(java.lang.String string)
  void releaseXlogInstance(
    jni.JString string,
  ) {
    return _releaseXlogInstance(reference, string.reference).check();
  }

  static final _newXlogInstance = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Xlog__newXlogInstance")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public native long newXlogInstance(com.tencent.mars.xlog.Xlog$XLogConfig xLogConfig)
  int newXlogInstance(
    Xlog_XLogConfig xLogConfig,
  ) {
    return _newXlogInstance(reference, xLogConfig.reference).long;
  }

  static final _setConsoleLogOpen = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Uint8)>>("Xlog__setConsoleLogOpen")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public native void setConsoleLogOpen(long j, boolean z)
  void setConsoleLogOpen(
    int j,
    bool z,
  ) {
    return _setConsoleLogOpen(reference, j, z ? 1 : 0).check();
  }

  static final _appenderClose = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Xlog__appenderClose")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public native void appenderClose()
  void appenderClose() {
    return _appenderClose(reference).check();
  }

  static final _appenderFlush = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Uint8)>>("Xlog__appenderFlush")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public native void appenderFlush(long j, boolean z)
  void appenderFlush(
    int j,
    bool z,
  ) {
    return _appenderFlush(reference, j, z ? 1 : 0).check();
  }

  static final _setMaxFileSize = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Int64)>>("Xlog__setMaxFileSize")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public native void setMaxFileSize(long j, long j1)
  void setMaxFileSize(
    int j,
    int j1,
  ) {
    return _setMaxFileSize(reference, j, j1).check();
  }

  static final _setMaxAliveTime = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Int64)>>("Xlog__setMaxAliveTime")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public native void setMaxAliveTime(long j, long j1)
  void setMaxAliveTime(
    int j,
    int j1,
  ) {
    return _setMaxAliveTime(reference, j, j1).check();
  }
}

final class $XlogType extends jni.JObjType<Xlog> {
  const $XlogType();

  @override
  String get signature => r"Lcom/tencent/mars/xlog/Xlog;";

  @override
  Xlog fromRef(jni.JObjectPtr ref) => Xlog.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($XlogType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($XlogType) && other is $XlogType;
  }
}
